diff --git a/app/build.gradle.kts b/app/build.gradle.kts
index 964df88..a776fbb 100644
--- a/app/build.gradle.kts
+++ b/app/build.gradle.kts
@@ -43,12 +43,12 @@ android {
 }
 
 dependencies {
-
     implementation(libs.androidx.core.ktx)
     implementation(libs.androidx.appcompat)
     implementation(libs.material)
     implementation(libs.androidx.activity)
     implementation(libs.androidx.constraintlayout)
+    implementation(libs.androidx.runtime)
     testImplementation(libs.junit)
     androidTestImplementation(libs.androidx.junit)
     androidTestImplementation(libs.androidx.espresso.core)
diff --git a/app/src/main/java/com/mekki/taco/presentation/navigation/AppNavigation.kt b/app/src/main/java/com/mekki/taco/presentation/navigation/AppNavigation.kt
index 7eadbc8..d65373b 100644
--- a/app/src/main/java/com/mekki/taco/presentation/navigation/AppNavigation.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/navigation/AppNavigation.kt
@@ -1,23 +1,12 @@
 package com.mekki.taco.presentation.navigation
 
 import android.util.Log
-import androidx.compose.foundation.layout.*
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.Text
 import androidx.compose.runtime.Composable
-import androidx.compose.ui.Alignment
-import androidx.compose.ui.Modifier
-import androidx.compose.ui.unit.dp
-import androidx.compose.material3.Scaffold
-import androidx.compose.material3.TopAppBar
-import androidx.compose.material3.IconButton
-import androidx.compose.material3.ExperimentalMaterial3Api
-import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.automirrored.filled.ArrowBack
-import androidx.compose.material3.Icon
 import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
 import androidx.compose.runtime.remember
+import androidx.compose.ui.Modifier
+import androidx.compose.ui.platform.LocalContext
 import androidx.lifecycle.viewmodel.compose.viewModel
 import androidx.navigation.NavHostController
 import androidx.navigation.NavType
@@ -26,265 +15,201 @@ import androidx.navigation.compose.composable
 import androidx.navigation.navArgument
 import com.mekki.taco.data.db.dao.AlimentoDao
 import com.mekki.taco.data.db.dao.DietaDao
+import com.mekki.taco.data.db.dao.ItemDietaDao
+import com.mekki.taco.data.repository.UserProfileRepository
+import com.mekki.taco.presentation.ui.addfood.AddFoodScreen
+import com.mekki.taco.presentation.ui.addfood.AddFoodViewModel
+import com.mekki.taco.presentation.ui.addfood.AddFoodViewModelFactory
+import com.mekki.taco.presentation.ui.diet.CreateDietScreen
 import com.mekki.taco.presentation.ui.diet.DietDetailScreen
 import com.mekki.taco.presentation.ui.diet.DietDetailViewModel
 import com.mekki.taco.presentation.ui.diet.DietDetailViewModelFactory
 import com.mekki.taco.presentation.ui.diet.DietListScreen
 import com.mekki.taco.presentation.ui.diet.DietListViewModel
 import com.mekki.taco.presentation.ui.diet.DietListViewModelFactory
-import com.mekki.taco.presentation.ui.diet.CreateDietScreen
 import com.mekki.taco.presentation.ui.fooddetail.AlimentoDetailScreen
 import com.mekki.taco.presentation.ui.fooddetail.AlimentoDetailViewModel
 import com.mekki.taco.presentation.ui.fooddetail.AlimentoDetailViewModelFactory
-import com.mekki.taco.presentation.ui.search.AlimentoViewModel
-import com.mekki.taco.presentation.ui.search.AlimentoViewModelFactory
-import com.mekki.taco.presentation.ui.addfood.AddFoodToDietViewModel
-import com.mekki.taco.presentation.ui.addfood.AddFoodToDietViewModelFactory
-import com.mekki.taco.presentation.ui.addfood.AddFoodToDietScreen
 import com.mekki.taco.presentation.ui.home.HomeScreen
 import com.mekki.taco.presentation.ui.home.HomeViewModel
 import com.mekki.taco.presentation.ui.home.HomeViewModelFactory
-import com.mekki.taco.presentation.ui.search.AlimentoSearchScreen
-import com.mekki.taco.presentation.ui.addfood.AddFoodToNewDietScreen
-import com.mekki.taco.data.repository.UserProfileRepository
-import com.mekki.taco.data.db.dao.ItemDietaDao
 import com.mekki.taco.presentation.ui.profile.ProfileViewModel
 import com.mekki.taco.presentation.ui.profile.ProfileViewModelFactory
-import androidx.compose.ui.platform.LocalContext
+import com.mekki.taco.presentation.ui.search.AlimentoSearchScreen
+import com.mekki.taco.presentation.ui.search.AlimentoViewModel
+import com.mekki.taco.presentation.ui.search.AlimentoViewModelFactory
 
-// Definição das rotas para evitar strings mágicas
 object AppDestinations {
+    object Args {
+        const val ALIMENTO_ID = "alimentoId"
+        const val DIET_ID = "dietId"
+    }
+
     const val HOME_ROUTE = "home"
-    // Detalhes dos Alimentos
-    const val ALIMENTO_DETAIL_BASE_ROUTE = "alimento_detail"
-    const val ALIMENTO_DETAIL_WITH_ARG_ROUTE = "$ALIMENTO_DETAIL_BASE_ROUTE/{alimentoId}"
-    const val ARG_ALIMENTO_ID = "alimentoId"
-    // Funcionalidade de Dietas
     const val DIET_LIST_ROUTE = "diet_list"
     const val CREATE_DIET_ROUTE = "create_diet"
-    const val DIET_DETAIL_BASE_ROUTE = "diet_item_detail"
-    const val DIET_DETAIL_WITH_ARG_ROUTE = "$DIET_DETAIL_BASE_ROUTE/{dietId}"
-    const val ARG_DIET_ID = "dietId"
-    const val ALIMENTO_SEARCH_BASE_ROUTE = "alimento_search"
-    const val ALIMENTO_SEARCH_WITH_ARG_ROUTE = "$ALIMENTO_SEARCH_BASE_ROUTE/{$ARG_DIET_ID}"
-    // Adicionar um alimento a uma dieta
-    const val ADD_FOOD_TO_DIET_BASE_ROUTE = "add_food_to_diet"
-    const val ADD_FOOD_TO_DIET_WITH_ARGS_ROUTE = "$ADD_FOOD_TO_DIET_BASE_ROUTE/{$ARG_DIET_ID}/{$ARG_ALIMENTO_ID}"
-    const val ALIMENTO_SEARCH_FOR_NEW_DIET_ROUTE = "alimento_search_for_new_diet"
-    const val ADD_FOOD_TO_NEW_DIET_ROUTE = "add_food_to_new_diet/{$ARG_ALIMENTO_ID}"
+    const val ALIMENTO_DETAIL_ROUTE = "alimento_detail/{${Args.ALIMENTO_ID}}"
+    const val DIET_DETAIL_ROUTE = "diet_detail/{${Args.DIET_ID}}"
+
+    // query-like optional param style (use defaultValue = -1 in navArgument)
+    const val ALIMENTO_SEARCH_ROUTE = "alimento_search?dietId={${Args.DIET_ID}}"
+    const val ADD_FOOD_ROUTE = "add_food/{${Args.ALIMENTO_ID}}?dietId={${Args.DIET_ID}}"
+
+    fun alimentoDetail(alimentoId: Int) = "alimento_detail/$alimentoId"
+    fun dietDetail(dietId: Int) = "diet_detail/$dietId"
+    fun addFood(alimentoId: Int, dietId: Int? = null) = "add_food/$alimentoId?dietId=${dietId ?: -1}"
+    fun alimentoSearch(dietId: Int? = null) = "alimento_search?dietId=${dietId ?: -1}"
 }
 
 @Composable
 fun AppNavHost(
+    modifier: Modifier = Modifier,
     navController: NavHostController,
+    onTitleChange: (String) -> Unit,
+    onFabChange: (@Composable (() -> Unit)?) -> Unit,
     alimentoDao: AlimentoDao,
     dietaDao: DietaDao,
     itemDietaDao: ItemDietaDao
 ) {
-    NavHost(navController = navController, startDestination = AppDestinations.HOME_ROUTE) {
-
+    NavHost(
+        modifier = modifier,
+        navController = navController,
+        startDestination = AppDestinations.HOME_ROUTE
+    ) {
+        // HOME
         composable(route = AppDestinations.HOME_ROUTE) {
             val context = LocalContext.current
             val profileRepository = remember { UserProfileRepository(context) }
-            val profileViewModel: ProfileViewModel = viewModel(
-                factory = ProfileViewModelFactory(profileRepository)
-            )
-
+            val profileViewModel: ProfileViewModel = viewModel(factory = ProfileViewModelFactory(profileRepository))
             val homeFactory = HomeViewModelFactory(dietaDao, alimentoDao)
             val homeViewModel: HomeViewModel = viewModel(factory = homeFactory)
 
             HomeScreen(
                 homeViewModel = homeViewModel,
                 profileViewModel = profileViewModel,
-                onNavigateToDietList = {
-                    navController.navigate(AppDestinations.DIET_LIST_ROUTE)
-                },
-                onNavigateToDiary = {
-                    Log.d("AppNavHost", "Navigate to Diary clicked - TODO")
-                },
+                onNavigateToDietList = { navController.navigate(AppDestinations.DIET_LIST_ROUTE) },
+                onNavigateToDiary = { Log.d("AppNavHost", "Navigate to Diary clicked - TODO") },
                 onNavigateToDetail = { alimentoId ->
-                    navController.navigate("${AppDestinations.ALIMENTO_DETAIL_BASE_ROUTE}/$alimentoId")
+                    navController.navigate(AppDestinations.alimentoDetail(alimentoId))
                 }
             )
         }
 
-        composable(
-            route = AppDestinations.ALIMENTO_DETAIL_WITH_ARG_ROUTE,
-            arguments = listOf(navArgument(AppDestinations.ARG_ALIMENTO_ID) { type = NavType.IntType })
-        ) { backStackEntry ->
-            val alimentoId = backStackEntry.arguments?.getInt(AppDestinations.ARG_ALIMENTO_ID)
-            if (alimentoId != null) {
-                val detailViewModelFactory = AlimentoDetailViewModelFactory(alimentoId, alimentoDao)
-                val alimentoDetailViewModel: AlimentoDetailViewModel = viewModel(factory = detailViewModelFactory)
-
-                val uiState by alimentoDetailViewModel.uiState.collectAsState()
-
-                AlimentoDetailScreen(
-                    uiState = uiState,
-                    onPortionChange = { newPortion ->
-                        alimentoDetailViewModel.updatePortion(newPortion)
-                    },
-                    onNavigateBack = { navController.popBackStack() }
-                )
-            } else {
-                Text("ID do alimento inválido.")
-            }
-        }
-
+        // DIET LIST
         composable(route = AppDestinations.DIET_LIST_ROUTE) {
             val dietListFactory = DietListViewModelFactory(dietaDao, itemDietaDao)
             val dietListViewModel: DietListViewModel = viewModel(factory = dietListFactory)
             DietListScreen(
                 viewModel = dietListViewModel,
-                onNavigateBack = { navController.popBackStack() },
-                onNavigateToCreateDiet = {
-                    navController.navigate(AppDestinations.CREATE_DIET_ROUTE)
-                },
+                onNavigateToCreateDiet = { navController.navigate(AppDestinations.CREATE_DIET_ROUTE) },
                 onNavigateToDietDetail = { dietId ->
-                    navController.navigate("${AppDestinations.DIET_DETAIL_BASE_ROUTE}/$dietId")
-                }
+                    navController.navigate(AppDestinations.dietDetail(dietId))
+                },
+                onFabChange = onFabChange
             )
         }
 
+        // DIET DETAIL
+        composable(
+            route = AppDestinations.DIET_DETAIL_ROUTE,
+            arguments = listOf(navArgument(AppDestinations.Args.DIET_ID) { type = NavType.IntType })
+        ) { backStackEntry ->
+            val dietId = backStackEntry.arguments?.getInt(AppDestinations.Args.DIET_ID)
+            if (dietId != null) {
+                val detailFactory = DietDetailViewModelFactory(dietId, dietaDao, itemDietaDao)
+                val detailViewModel: DietDetailViewModel = viewModel(factory = detailFactory)
+                DietDetailScreen(
+                    viewModel = detailViewModel,
+                    onNavigateToAddFood = {
+                        navController.navigate(AppDestinations.alimentoSearch(dietId = dietId))
+                    },
+                    onTitleChange = onTitleChange,
+                    onFabChange = onFabChange
+                )
+            }
+        }
+
+        // CREATE DIET
         composable(route = AppDestinations.CREATE_DIET_ROUTE) {
             val parentEntry = remember(it) { navController.getBackStackEntry(AppDestinations.DIET_LIST_ROUTE) }
             val dietListViewModel: DietListViewModel = viewModel(viewModelStoreOwner = parentEntry)
             CreateDietScreen(
                 viewModel = dietListViewModel,
                 onNavigateBack = { navController.popBackStack() },
-                onNavigateToAddFood = { navController.navigate(AppDestinations.ALIMENTO_SEARCH_FOR_NEW_DIET_ROUTE) }
+                onNavigateToAddFood = {
+                    // open generic search (no diet preselected)
+                    navController.navigate(AppDestinations.alimentoSearch())
+                }
             )
         }
 
-        composable(route = AppDestinations.ALIMENTO_SEARCH_FOR_NEW_DIET_ROUTE) {
-            val searchFactory = AlimentoViewModelFactory(alimentoDao)
-            val searchViewModel: AlimentoViewModel = viewModel(factory = searchFactory)
+        // ALIMENTO SEARCH
+        composable(
+            route = AppDestinations.ALIMENTO_SEARCH_ROUTE,
+            arguments = listOf(navArgument(AppDestinations.Args.DIET_ID) {
+                type = NavType.IntType
+                defaultValue = -1
+            })
+        ) { backStackEntry ->
+            val dietId = backStackEntry.arguments?.getInt(AppDestinations.Args.DIET_ID)
+            val searchViewModel: AlimentoViewModel = viewModel(factory = AlimentoViewModelFactory(alimentoDao))
+
             AlimentoSearchScreen(
                 viewModel = searchViewModel,
                 onAlimentoClick = { alimentoId ->
-                    // Navigates to the screen that adds to the temporary list
-                    navController.navigate("add_food_to_new_diet/$alimentoId")
+                    navController.navigate(AppDestinations.addFood(alimentoId = alimentoId, dietId = dietId?.takeIf { it != -1 }))
                 },
                 onNavigateBack = { navController.popBackStack() }
             )
         }
 
-        // Screen to add a food item to the temporary list in the ViewModel
+        // ADD FOOD
         composable(
-            route = AppDestinations.ADD_FOOD_TO_NEW_DIET_ROUTE,
-            arguments = listOf(navArgument(AppDestinations.ARG_ALIMENTO_ID) { type = NavType.IntType })
+            route = AppDestinations.ADD_FOOD_ROUTE,
+            arguments = listOf(
+                navArgument(AppDestinations.Args.ALIMENTO_ID) { type = NavType.IntType },
+                navArgument(AppDestinations.Args.DIET_ID) {
+                    type = NavType.IntType
+                    defaultValue = -1
+                }
+            )
         ) { backStackEntry ->
-            val foodId = backStackEntry.arguments?.getInt(AppDestinations.ARG_ALIMENTO_ID)
-            val parentEntry = remember(backStackEntry) { navController.getBackStackEntry(AppDestinations.DIET_LIST_ROUTE) }
-            val dietListViewModel: DietListViewModel = viewModel(viewModelStoreOwner = parentEntry)
+            val foodId = backStackEntry.arguments?.getInt(AppDestinations.Args.ALIMENTO_ID)
+            val dietId = backStackEntry.arguments?.getInt(AppDestinations.Args.DIET_ID)?.takeIf { it != -1 }
 
             if (foodId != null) {
-                AddFoodToNewDietScreen(
+                val addFoodFactory = AddFoodViewModelFactory(
                     foodId = foodId,
                     alimentoDao = alimentoDao,
-                    dietListViewModel = dietListViewModel,
-                    onFoodAdded = {
-                        // Pop back twice to return to the CreateDietScreen
-                        navController.popBackStack(AppDestinations.ALIMENTO_SEARCH_FOR_NEW_DIET_ROUTE, true)
-                    },
-                    onNavigateBack = { navController.popBackStack() }
-                )
-            }
-        }
-
-        composable(
-            route = AppDestinations.DIET_DETAIL_WITH_ARG_ROUTE,
-            arguments = listOf(navArgument(AppDestinations.ARG_DIET_ID) { type = NavType.IntType })
-        ) { backStackEntry ->
-            val dietId = backStackEntry.arguments?.getInt(AppDestinations.ARG_DIET_ID)
-            if (dietId != null) {
-                val detailFactory = DietDetailViewModelFactory(dietId, dietaDao, itemDietaDao)
-                val detailViewModel: DietDetailViewModel = viewModel(factory = detailFactory)
-                DietDetailScreen(
-                    viewModel = detailViewModel,
-                    onNavigateBack = { navController.popBackStack() },
-                    onNavigateToAddFood = {
-                        navController.navigate("${AppDestinations.ALIMENTO_SEARCH_BASE_ROUTE}/$dietId")
-                    }
+                    dietaDao = dietaDao,
+                    itemDietaDao = itemDietaDao,
+                    initialDietId = dietId
                 )
-            }
-        }
-
-        composable(
-            route = AppDestinations.ALIMENTO_SEARCH_WITH_ARG_ROUTE,
-            arguments = listOf(navArgument(AppDestinations.ARG_DIET_ID) { type = NavType.IntType })
-        ) { backStackEntry ->
-            val dietId = backStackEntry.arguments?.getInt(AppDestinations.ARG_DIET_ID)
-            if (dietId != null) {
-                val searchViewModelFactory = AlimentoViewModelFactory(alimentoDao)
-                val searchViewModel: AlimentoViewModel = viewModel(factory = searchViewModelFactory)
-
-                AlimentoSearchScreen(
-                    viewModel = searchViewModel,
-                    onAlimentoClick = { alimentoId ->
-                        navController.navigate(
-                            "${AppDestinations.ADD_FOOD_TO_DIET_BASE_ROUTE}/$dietId/$alimentoId"
-                        )
-                    },
-                    onNavigateBack = { navController.popBackStack() }
+                val addFoodViewModel: AddFoodViewModel = viewModel(factory = addFoodFactory)
+                AddFoodScreen(
+                    viewModel = addFoodViewModel,
+                    onFoodAdded = { navController.popBackStack() }
                 )
             }
         }
 
         composable(
-            route = AppDestinations.ADD_FOOD_TO_DIET_WITH_ARGS_ROUTE,
-            arguments = listOf(
-                navArgument(AppDestinations.ARG_DIET_ID) { type = NavType.IntType },
-                navArgument(AppDestinations.ARG_ALIMENTO_ID) { type = NavType.IntType }
-            )
+            route = AppDestinations.ALIMENTO_DETAIL_ROUTE,
+            arguments = listOf(navArgument(AppDestinations.Args.ALIMENTO_ID) { type = NavType.IntType })
         ) { backStackEntry ->
-            val dietId = backStackEntry.arguments?.getInt(AppDestinations.ARG_DIET_ID)
-            val foodId = backStackEntry.arguments?.getInt(AppDestinations.ARG_ALIMENTO_ID)
-
-            if (dietId != null && foodId != null) {
-                val addFoodFactory = AddFoodToDietViewModelFactory(alimentoDao, itemDietaDao)
-                val addFoodViewModel: AddFoodToDietViewModel = viewModel(factory = addFoodFactory)
+            val alimentoId = backStackEntry.arguments?.getInt(AppDestinations.Args.ALIMENTO_ID)
+            if (alimentoId != null) {
+                val detailFactory = AlimentoDetailViewModelFactory(alimentoId, alimentoDao)
+                val detailViewModel: AlimentoDetailViewModel = viewModel(factory = detailFactory)
+                val uiState by detailViewModel.uiState.collectAsState()
 
-                AddFoodToDietScreen(
-                    viewModel = addFoodViewModel,
-                    dietId = dietId,
-                    foodId = foodId,
+                AlimentoDetailScreen(
+                    uiState = uiState,
+                    onPortionChange = detailViewModel::updatePortion,
                     onNavigateBack = { navController.popBackStack() },
-                    onFoodAdded = {
-                        navController.popBackStack()
-                    }
+                    onTitleChange = onTitleChange
                 )
             }
         }
     }
-}
-
-@OptIn(ExperimentalMaterial3Api::class)
-@Composable
-fun PlaceholderScreen(screenName: String, modifier: Modifier = Modifier, onNavigateBack: (() -> Unit)? = null) {
-    Scaffold(
-        topBar = {
-            TopAppBar(
-                title = { Text(screenName) },
-                navigationIcon = {
-                    onNavigateBack?.let { navBack ->
-                        IconButton(onClick = navBack) {
-                            Icon(
-                                Icons.AutoMirrored.Filled.ArrowBack,
-                                contentDescription = "Voltar"
-                            )
-                        }
-                    }
-                }
-            )
-        }
-    ) { paddingValues ->
-        Column(
-            modifier = modifier.fillMaxSize().padding(paddingValues).padding(16.dp),
-            verticalArrangement = Arrangement.Center,
-            horizontalAlignment = Alignment.CenterHorizontally
-        ) {
-            Text("(Em construção)", style = MaterialTheme.typography.bodyLarge)
-        }
-    }
 }
\ No newline at end of file
diff --git a/app/src/main/java/com/mekki/taco/presentation/ui/MainActivity.kt b/app/src/main/java/com/mekki/taco/presentation/ui/MainActivity.kt
index c52220a..0e668a2 100644
--- a/app/src/main/java/com/mekki/taco/presentation/ui/MainActivity.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/ui/MainActivity.kt
@@ -4,56 +4,148 @@ import android.os.Bundle
 import android.util.Log
 import androidx.activity.ComponentActivity
 import androidx.activity.compose.setContent
-import androidx.activity.enableEdgeToEdge // Correto
-import androidx.compose.foundation.layout.fillMaxSize
-import androidx.compose.material3.MaterialTheme
-import androidx.compose.material3.Surface
+import androidx.activity.enableEdgeToEdge
+import androidx.compose.foundation.layout.padding
+import androidx.compose.material.icons.Icons
+import androidx.compose.material.icons.automirrored.filled.ArrowBack
+import androidx.compose.material.icons.filled.AccountCircle
+import androidx.compose.material3.*
+import androidx.compose.runtime.*
+import androidx.compose.runtime.saveable.rememberSaveable
 import androidx.compose.ui.Modifier
-// Imports do Room e DAO
-import com.mekki.taco.data.db.dao.AlimentoDao // Import para AlimentoDao
-import com.mekki.taco.data.db.database.AppDatabase
+import androidx.compose.ui.platform.LocalContext
+import androidx.lifecycle.viewmodel.compose.viewModel
+import androidx.navigation.compose.currentBackStackEntryAsState
+import androidx.navigation.compose.rememberNavController
+import com.mekki.taco.data.db.dao.AlimentoDao
 import com.mekki.taco.data.db.dao.DietaDao
 import com.mekki.taco.data.db.dao.ItemDietaDao
-// Imports da UI e ViewModel
-import com.mekki.taco.presentation.navigation.AppNavHost // Importe seu AppNavHost (verifique o pacote)
-import com.mekki.taco.presentation.ui.search.AlimentoViewModelFactory // Ajuste o pacote se necessário (ex: com.mekki.taco.presentation.ui.search.AlimentoViewModelFactory)
-// Imports do Navigation
-import androidx.navigation.compose.rememberNavController
-// Imports do Coroutine
+import com.mekki.taco.data.db.database.AppDatabase
+import com.mekki.taco.data.repository.UserProfileRepository
+import com.mekki.taco.presentation.navigation.AppNavHost
+import com.mekki.taco.presentation.ui.profile.ProfileSheetContent
+import com.mekki.taco.presentation.ui.profile.ProfileViewModel
+import com.mekki.taco.presentation.ui.profile.ProfileViewModelFactory
 import kotlinx.coroutines.CoroutineScope
 import kotlinx.coroutines.Dispatchers
 import kotlinx.coroutines.SupervisorJob
+import kotlinx.coroutines.launch
 
 class MainActivity : ComponentActivity() {
     private val applicationScope = CoroutineScope(SupervisorJob() + Dispatchers.Main)
     companion object { private const val TAG = "MainActivity_TACO" }
 
+    @OptIn(ExperimentalMaterial3Api::class)
     override fun onCreate(savedInstanceState: Bundle?) {
         super.onCreate(savedInstanceState)
         Log.d(TAG, "onCreate: Iniciando MainActivity.")
 
         enableEdgeToEdge()
 
-        // 1. Inicializa o banco e obtém o DAO
         val appDatabase = AppDatabase.getDatabase(applicationContext, applicationScope)
-        val alimentoDao: AlimentoDao = appDatabase.alimentoDao() // Explicitando o tipo para clareza
-        val dietaDao = appDatabase.dietaDao()
-        val itemDietaDao = appDatabase.itemDietaDao()
+        val alimentoDao: AlimentoDao = appDatabase.alimentoDao()
+        val dietaDao: DietaDao = appDatabase.dietaDao()
+        val itemDietaDao: ItemDietaDao = appDatabase.itemDietaDao()
 
         setContent {
             MaterialTheme {
-                Surface(
-                    modifier = Modifier.fillMaxSize(),
-                    color = MaterialTheme.colorScheme.background
-                ) {
-                    val navController = rememberNavController()
+                // 1. INICIALIZAÇÃO DOS VIEWMODELS E ESTADOS
+                val navController = rememberNavController()
+                var fab: @Composable (() -> Unit)? by remember { mutableStateOf(null) }
+                var screenTitle by rememberSaveable { mutableStateOf("NutriTACO") }
+
+                // ViewModel e Estados da BottomSheet
+                val context = LocalContext.current
+                val profileRepository = remember { UserProfileRepository(context) }
+                val profileViewModel: ProfileViewModel = viewModel(factory = ProfileViewModelFactory(profileRepository))
+                val sheetState = rememberModalBottomSheetState()
+                val scope = rememberCoroutineScope()
+                var showBottomSheet by remember { mutableStateOf(false) }
+
+                // 2. LÓGICA DA UI PERSISTENTE
+                val navBackStackEntry by navController.currentBackStackEntryAsState()
+                val currentRoute = navBackStackEntry?.destination?.route
+                val canNavigateBack = navController.previousBackStackEntry != null
+
+                DisposableEffect(navBackStackEntry) {
+                    val defaultTitle = when {
+                        currentRoute?.startsWith("alimento_detail") == true -> "Detalhes do Alimento"
+                        currentRoute?.startsWith("diet_detail") == true -> "Detalhes da Dieta"
+                        currentRoute == "diet_list" -> "Minhas Dietas"
+                        currentRoute == "create_diet" -> "Criar Nova Dieta"
+                        else -> "NutriTACO"
+                    }
+                    screenTitle = defaultTitle
+
+                    onDispose{
+                    }
+                }
+
+                // 3. SCAFFOLD PRINCIPAL
+                Scaffold(
+                    topBar = {
+                        TopAppBar(
+                            title = { Text(text = screenTitle) },
+                            colors = TopAppBarDefaults.topAppBarColors(
+                                containerColor = MaterialTheme.colorScheme.primary,
+                                titleContentColor = MaterialTheme.colorScheme.onPrimary,
+                                navigationIconContentColor = MaterialTheme.colorScheme.onPrimary,
+                                actionIconContentColor = MaterialTheme.colorScheme.onPrimary
+                            ),
+                            navigationIcon = {
+                                if (canNavigateBack) {
+                                    IconButton(onClick = { navController.navigateUp() }) {
+                                        Icon(
+                                            imageVector = Icons.AutoMirrored.Filled.ArrowBack,
+                                            contentDescription = "Voltar"
+                                        )
+                                    }
+                                }
+                            },
+                            actions = {
+                                IconButton(onClick = { showBottomSheet = true }) {
+                                    Icon(
+                                        imageVector = Icons.Default.AccountCircle,
+                                        contentDescription = "Abrir Perfil"
+                                    )
+                                }
+                            }
+                        )
+                    },
+                    floatingActionButton = {
+                        fab?.invoke()
+                    }
+                ) { innerPadding ->
+                    // 4. CONTEÚDO DA NAVEGAÇÃO
                     AppNavHost(
                         navController = navController,
+                        modifier = Modifier.padding(innerPadding),
+                        onTitleChange = { newTitle -> screenTitle = newTitle },
+                        onFabChange = { newFab -> fab = newFab },
                         alimentoDao = alimentoDao,
                         dietaDao = dietaDao,
                         itemDietaDao = itemDietaDao
                     )
                 }
+
+                // 5. ABA DE PERFIL
+                if (showBottomSheet) {
+                    ModalBottomSheet(
+                        onDismissRequest = { showBottomSheet = false },
+                        sheetState = sheetState
+                    ) {
+                        ProfileSheetContent(
+                            viewModel = profileViewModel,
+                            onDismiss = {
+                                scope.launch { sheetState.hide() }.invokeOnCompletion {
+                                    if (!sheetState.isVisible) {
+                                        showBottomSheet = false
+                                    }
+                                }
+                            }
+                        )
+                    }
+                }
             }
         }
         Log.d(TAG, "onCreate: setContent com AppNavHost chamado.")
diff --git a/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodScreen.kt b/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodScreen.kt
index f165d24..85690a9 100644
--- a/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodScreen.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodScreen.kt
@@ -12,6 +12,7 @@ import androidx.compose.ui.Modifier
 import androidx.compose.ui.text.input.KeyboardType
 import androidx.compose.ui.unit.dp
 import com.mekki.taco.data.db.entity.Dieta
+import com.mekki.taco.data.db.entity.Alimento
 import com.mekki.taco.presentation.ui.components.NutrientRow
 
 @OptIn(ExperimentalMaterial3Api::class)
@@ -23,8 +24,8 @@ fun AddFoodScreen(
     val uiState by viewModel.uiState.collectAsState()
     val alimento = uiState.alimento
     val calculatedNutrients = uiState.calculatedNutrients
+    val selectedDiet = uiState.selectedDiet
 
-    var selectedDiet by remember { mutableStateOf<Dieta?>(null) }
     var showNewDietDialog by remember { mutableStateOf(false) }
 
     // Meal type selection state
@@ -104,15 +105,17 @@ fun AddFoodScreen(
                 Column(Modifier.padding(16.dp)) {
                     Text("Nutrientes na Porção", style = MaterialTheme.typography.titleMedium)
                     Spacer(modifier = Modifier.height(8.dp))
-                    NutrientRow("Calorias", calculatedNutrients.energiaKcal, "kcal")
-                    NutrientRow("Proteínas", calculatedNutrients.proteina, "g")
-                    NutrientRow("Carboidratos", calculatedNutrients.carboidratos, "g")
-                    NutrientRow("Gorduras", calculatedNutrients.lipidios?.total, "g")
+
+                    // If nutrient is null, show 0.0 to satisfy NutrientRow signature.
+                    NutrientRow("Calorias", calculatedNutrients.energiaKcal ?: 0.0, "kcal")
+                    NutrientRow("Proteínas", calculatedNutrients.proteina ?: 0.0, "g")
+                    NutrientRow("Carboidratos", calculatedNutrients.carboidratos ?: 0.0, "g")
+                    NutrientRow("Gorduras", calculatedNutrients.lipidios?.total ?: 0.0, "g")
                 }
             }
         }
 
-        // 4. Unified Diet Selector
+        // 4. Unified Diet Selector (driven by ViewModel selectedDiet)
         var dietDropdownExpanded by remember { mutableStateOf(false) }
         ExposedDropdownMenuBox(
             expanded = dietDropdownExpanded,
@@ -134,7 +137,7 @@ fun AddFoodScreen(
                     DropdownMenuItem(
                         text = { Text(diet.nome) },
                         onClick = {
-                            selectedDiet = diet
+                            viewModel.selectDiet(diet.id)
                             dietDropdownExpanded = false
                         }
                     )
@@ -154,13 +157,15 @@ fun AddFoodScreen(
         // Add to Diet Button
         Button(
             onClick = {
-                selectedDiet?.let {
+                uiState.selectedDiet?.let {
                     viewModel.addItemToExistingDiet(it.id, selectedMealType)
                     onFoodAdded()
                 }
             },
-            enabled = selectedDiet != null,
-            modifier = Modifier.fillMaxWidth().height(50.dp)
+            enabled = uiState.selectedDiet != null,
+            modifier = Modifier
+                .fillMaxWidth()
+                .height(50.dp)
         ) {
             Text("Adicionar à Dieta")
         }
@@ -191,4 +196,4 @@ fun FoodHeaderCard(alimento: Alimento) {
             )
         }
     }
-}
\ No newline at end of file
+}
diff --git a/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodViewModel.kt b/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodViewModel.kt
index 9fc4c63..9a5ba99 100644
--- a/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodViewModel.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodViewModel.kt
@@ -3,62 +3,107 @@ package com.mekki.taco.presentation.ui.addfood
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.viewModelScope
 import com.mekki.taco.data.db.dao.AlimentoDao
+import com.mekki.taco.data.db.dao.DietaDao
 import com.mekki.taco.data.db.dao.ItemDietaDao
-import com.mekki.taco.data.db.entity.Alimento
+import com.mekki.taco.data.db.entity.Dieta
 import com.mekki.taco.data.db.entity.ItemDieta
-import kotlinx.coroutines.flow.MutableStateFlow
-import kotlinx.coroutines.flow.StateFlow
-import kotlinx.coroutines.flow.asStateFlow
+import com.mekki.taco.data.db.entity.Alimento
+import com.mekki.taco.utils.NutrientCalculator
+import com.mekki.taco.utils.NutrientesPorPorcao
+import kotlinx.coroutines.flow.*
 import kotlinx.coroutines.launch
 
-/**
- * ViewModel for the AddFoodToDietScreen.
- *
- * @param alimentoDao DAO for accessing Alimento data.
- * @param itemDietaDao DAO for accessing ItemDieta data.
- */
-class AddFoodToDietViewModel(
+data class AddFoodUiState(
+    val alimento: Alimento? = null,
+    val allDiets: List<Dieta> = emptyList(),
+    val portion: String = "100",
+    val calculatedNutrients: NutrientesPorPorcao? = null,
+    val selectedDiet: Dieta? = null,     // <-- expose the selected diet
+    val isLoading: Boolean = true
+)
+
+class AddFoodViewModel(
+    private val foodId: Int,
     private val alimentoDao: AlimentoDao,
-    private val itemDietaDao: ItemDietaDao
+    private val dietaDao: DietaDao,
+    private val itemDietaDao: ItemDietaDao,
+    private val initialDietId: Int? = null
 ) : ViewModel() {
 
-    // Holds the details of the food item being added.
-    private val _alimento = MutableStateFlow<Alimento?>(null)
-    val alimento: StateFlow<Alimento?> = _alimento.asStateFlow()
+    private val _portion = MutableStateFlow("100")
+    private val _selectedDietId = MutableStateFlow<Int?>(initialDietId)
+    private val _uiState = MutableStateFlow(AddFoodUiState())
+    val uiState: StateFlow<AddFoodUiState> = _uiState.asStateFlow()
+
+    init {
+        val alimentoFlow: Flow<Alimento?> = alimentoDao.buscarAlimentoPorId(foodId)
+        val dietsFlow: Flow<List<Dieta>> = dietaDao.buscarTodasDietas()
 
-    /**
-     * Fetches the details of a specific food item from the database.
-     *
-     * @param foodId The ID of the food to fetch.
-     */
-    fun loadAlimento(foodId: Int) {
         viewModelScope.launch {
-            // Since the DAO returns a Flow, we collect the first value.
-            alimentoDao.buscarAlimentoPorId(foodId).collect {
-                _alimento.value = it
+            combine(alimentoFlow, dietsFlow, _portion, _selectedDietId) { alimento, diets, portionStr, selectedId ->
+                val portionVal = portionStr.toDoubleOrNull() ?: 100.0
+                val calculated = alimento?.let { NutrientCalculator.calcularNutrientesParaPorcao(it, portionVal) }
+                val selectedDiet = selectedId?.let { id -> diets.find { it.id == id } }
+                AddFoodUiState(
+                    alimento = alimento,
+                    allDiets = diets,
+                    portion = portionStr,
+                    calculatedNutrients = calculated,
+                    selectedDiet = selectedDiet,
+                    isLoading = alimento == null
+                )
+            }.collect {
+                _uiState.value = it
             }
         }
     }
 
+    fun onPortionChange(newPortion: String) {
+        if (newPortion.matches("^\\d*\\.?\\d*\$".toRegex())) {
+            _portion.value = newPortion
+        }
+    }
+
     /**
-     * Adds a food item to a diet.
-     *
-     * @param dietId The ID of the diet.
-     * @param foodId The ID of the food.
-     * @param quantity The quantity of the food in grams.
-     * @param mealType The type of meal (e.g., "Breakfast", "Lunch").
-     * @param onFoodAdded A callback to be invoked after the food has been successfully added.
+     * Called by UI when user selects a diet from the dropdown.
      */
-    fun addFoodToDiet(dietId: Int, foodId: Int, quantity: Double, mealType: String, onFoodAdded: () -> Unit) {
+    fun selectDiet(dietId: Int?) {
+        _selectedDietId.value = dietId
+    }
+
+    fun addItemToExistingDiet(dietId: Int, mealType: String) {
         viewModelScope.launch {
-            val newItem = ItemDieta(
+            val portionValue = _portion.value.toDoubleOrNull() ?: return@launch
+            val item = ItemDieta(
                 dietaId = dietId,
                 alimentoId = foodId,
-                quantidadeGramas = quantity, // Corrected field name
+                quantidadeGramas = portionValue,
+                tipoRefeicao = mealType
+            )
+            itemDietaDao.inserirItemDieta(item)
+        }
+    }
+
+    fun addItemToNewDiet(dietName: String, mealType: String) {
+        viewModelScope.launch {
+            val portionValue = _portion.value.toDoubleOrNull() ?: return@launch
+            val newDieta = Dieta(
+                nome = dietName,
+                dataCriacao = System.currentTimeMillis()
+            )
+            val newDietIdLong = dietaDao.inserirDieta(newDieta)
+            val newDietId = newDietIdLong.toInt()
+
+            // Set the newly created diet as selected so UI reflects that
+            _selectedDietId.value = newDietId
+
+            val item = ItemDieta(
+                dietaId = newDietId,
+                alimentoId = foodId,
+                quantidadeGramas = portionValue,
                 tipoRefeicao = mealType
             )
-            itemDietaDao.inserirItemDieta(newItem) // Assuming this is the insert method name
-            onFoodAdded() // Trigger the callback for navigation
+            itemDietaDao.inserirItemDieta(item)
         }
     }
-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodViewModelFactory.kt b/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodViewModelFactory.kt
index df6b660..eafe11f 100644
--- a/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodViewModelFactory.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/ui/addfood/AddFoodViewModelFactory.kt
@@ -3,21 +3,27 @@ package com.mekki.taco.presentation.ui.addfood
 import androidx.lifecycle.ViewModel
 import androidx.lifecycle.ViewModelProvider
 import com.mekki.taco.data.db.dao.AlimentoDao
+import com.mekki.taco.data.db.dao.DietaDao
 import com.mekki.taco.data.db.dao.ItemDietaDao
 
-/**
- * Factory for creating instances of AddFoodToDietViewModel.
- * This is necessary to pass arguments (DAOs) to the ViewModel's constructor.
- */
-class AddFoodToDietViewModelFactory(
+class AddFoodViewModelFactory(
+    private val foodId: Int,
     private val alimentoDao: AlimentoDao,
-    private val itemDietaDao: ItemDietaDao
+    private val dietaDao: DietaDao,
+    private val itemDietaDao: ItemDietaDao,
+    private val initialDietId: Int? = null
 ) : ViewModelProvider.Factory {
 
     @Suppress("UNCHECKED_CAST")
     override fun <T : ViewModel> create(modelClass: Class<T>): T {
-        if (modelClass.isAssignableFrom(AddFoodToDietViewModel::class.java)) {
-            return AddFoodToDietViewModel(alimentoDao, itemDietaDao) as T
+        if (modelClass.isAssignableFrom(AddFoodViewModel::class.java)) {
+            return AddFoodViewModel(
+                foodId = foodId,
+                alimentoDao = alimentoDao,
+                dietaDao = dietaDao,
+                itemDietaDao = itemDietaDao,
+                initialDietId = initialDietId
+            ) as T
         }
         throw IllegalArgumentException("Unknown ViewModel class")
     }
diff --git a/app/src/main/java/com/mekki/taco/presentation/ui/diet/CreateDietScreen.kt b/app/src/main/java/com/mekki/taco/presentation/ui/diet/CreateDietScreen.kt
index 752a03e..7cdc5bd 100644
--- a/app/src/main/java/com/mekki/taco/presentation/ui/diet/CreateDietScreen.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/ui/diet/CreateDietScreen.kt
@@ -1,17 +1,36 @@
 package com.mekki.taco.presentation.ui.diet
 
 import android.util.Log
-import androidx.compose.foundation.layout.*
+import androidx.compose.foundation.layout.Arrangement
+import androidx.compose.foundation.layout.Box
+import androidx.compose.foundation.layout.Column
+import androidx.compose.foundation.layout.Row
+import androidx.compose.foundation.layout.Spacer
+import androidx.compose.foundation.layout.fillMaxSize
+import androidx.compose.foundation.layout.fillMaxWidth
+import androidx.compose.foundation.layout.height
+import androidx.compose.foundation.layout.padding
+import androidx.compose.foundation.layout.size
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.lazy.items
 import androidx.compose.foundation.text.KeyboardOptions
 import androidx.compose.material.icons.Icons
-import androidx.compose.material.icons.automirrored.filled.ArrowBack
 import androidx.compose.material.icons.filled.Add
 import androidx.compose.material.icons.filled.Delete
-import androidx.compose.material3.*
+import androidx.compose.material3.Button
+import androidx.compose.material3.ButtonDefaults
+import androidx.compose.material3.DividerDefaults
+import androidx.compose.material3.ExperimentalMaterial3Api
 import androidx.compose.material3.HorizontalDivider
-import androidx.compose.runtime.*
+import androidx.compose.material3.Icon
+import androidx.compose.material3.IconButton
+import androidx.compose.material3.MaterialTheme
+import androidx.compose.material3.OutlinedTextField
+import androidx.compose.material3.Text
+import androidx.compose.runtime.Composable
+import androidx.compose.runtime.LaunchedEffect
+import androidx.compose.runtime.collectAsState
+import androidx.compose.runtime.getValue
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.text.font.FontWeight
@@ -27,7 +46,7 @@ import java.text.DecimalFormat
 fun CreateDietScreen(
     viewModel: DietListViewModel,
     onNavigateBack: () -> Unit,
-    onNavigateToAddFood: () -> Unit // New navigation lambda
+    onNavigateToAddFood: () -> Unit
 ) {
     val nomeDieta by viewModel.nomeNovaDieta.collectAsState()
     // The temporary list of foods for the new diet
@@ -41,103 +60,90 @@ fun CreateDietScreen(
         }
     }
 
-    Scaffold(
-        topBar = {
-            TopAppBar(
-                title = { Text("Criar Nova Dieta") },
-                navigationIcon = {
-                    IconButton(onClick = onNavigateBack) {
-                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Voltar")
-                    }
-                }
-            )
-        }
-    ) { paddingValues ->
-        Column(
+    Column(
+        modifier = Modifier
+            .fillMaxSize()
+            .padding(horizontal = 16.dp)
+    ) {
+        // Diet Name Input
+        OutlinedTextField(
+            value = nomeDieta,
+            onValueChange = { viewModel.onNomeNovaDietaChange(it) },
+            label = { Text("Nome da Dieta*") },
+            singleLine = true,
             modifier = Modifier
-                .fillMaxSize()
-                .padding(paddingValues)
-                .padding(horizontal = 16.dp)
-        ) {
-            // Diet Name Input
-            OutlinedTextField(
-                value = nomeDieta,
-                onValueChange = { viewModel.onNomeNovaDietaChange(it) },
-                label = { Text("Nome da Dieta*") },
-                singleLine = true,
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .padding(vertical = 16.dp),
-                keyboardOptions = KeyboardOptions(
-                    capitalization = KeyboardCapitalization.Sentences
-                )
+                .fillMaxWidth()
+                .padding(vertical = 16.dp),
+            keyboardOptions = KeyboardOptions(
+                capitalization = KeyboardCapitalization.Sentences
             )
+        )
 
-            // "Add Food" Button
-            Button(
-                onClick = onNavigateToAddFood,
-                modifier = Modifier.fillMaxWidth()
-            ) {
-                Icon(Icons.Default.Add, contentDescription = "Add Food Icon", modifier = Modifier.size(ButtonDefaults.IconSize))
-                Spacer(Modifier.size(ButtonDefaults.IconSpacing))
-                Text("Adicionar Alimento")
-            }
+        // "Add Food" Button
+        Button(
+            onClick = onNavigateToAddFood, modifier = Modifier.fillMaxWidth()
+        ) {
+            Icon(
+                Icons.Default.Add,
+                contentDescription = "Add Food Icon",
+                modifier = Modifier.size(ButtonDefaults.IconSize)
+            )
+            Spacer(Modifier.size(ButtonDefaults.IconSpacing))
+            Text("Adicionar Alimento")
+        }
 
-            Spacer(modifier = Modifier.height(16.dp))
+        Spacer(modifier = Modifier.height(16.dp))
 
-            // List of foods added so far
-            Text("Alimentos Adicionados:", style = MaterialTheme.typography.titleMedium)
-            HorizontalDivider(
-                modifier = Modifier.padding(vertical = 8.dp),
-                thickness = DividerDefaults.Thickness,
-                color = DividerDefaults.color
-            )
+        // List of foods added so far
+        Text("Alimentos Adicionados:", style = MaterialTheme.typography.titleMedium)
+        HorizontalDivider(
+            modifier = Modifier.padding(vertical = 8.dp),
+            thickness = DividerDefaults.Thickness,
+            color = DividerDefaults.color
+        )
 
-            // Lista temporária para o usuário ver os alimentos adicionados ao criar uma dieta
-            val groupedTemporaryList = temporaryFoodList.groupBy {it.itemDieta.tipoRefeicao ?: "Sem Categoria" }
+        // Lista temporária para o usuário ver os alimentos adicionados ao criar uma dieta
+        val groupedTemporaryList =
+            temporaryFoodList.groupBy { it.itemDieta.tipoRefeicao ?: "Sem Categoria" }
 
-            if (groupedTemporaryList.isEmpty()) {
-                Box(
-                    modifier = Modifier
-                        .weight(1f)
-                        .fillMaxWidth(),
-                    contentAlignment = Alignment.Center
-                ) {
-                    Text("Nenhum alimento adicionado ainda.", textAlign = TextAlign.Center)
-                }
-            } else {
-                LazyColumn(modifier = Modifier.weight(1f)) {
-                    groupedTemporaryList.forEach { (mealType, items) ->
-                        item {
-                            Text(
-                                text = mealType,
-                                style = MaterialTheme.typography.titleMedium,
-                                color = MaterialTheme.colorScheme.primary,
-                                modifier = Modifier.padding(top = 8.dp)
-                            )
-                        }
-                        items(items, key = { it.itemDieta.id }) { foodItem ->
-                            AddedFoodItemRow(
-                                item = foodItem,
-                                onRemove = {
-                                    viewModel.removeTemporaryFoodItem(foodItem)
-                                }
-                            )
-                        }
+        if (groupedTemporaryList.isEmpty()) {
+            Box(
+                modifier = Modifier
+                    .weight(1f)
+                    .fillMaxWidth(), contentAlignment = Alignment.Center
+            ) {
+                Text("Nenhum alimento adicionado ainda.", textAlign = TextAlign.Center)
+            }
+        } else {
+            LazyColumn(modifier = Modifier.weight(1f)) {
+                groupedTemporaryList.forEach { (mealType, items) ->
+                    item {
+                        Text(
+                            text = mealType,
+                            style = MaterialTheme.typography.titleMedium,
+                            color = MaterialTheme.colorScheme.primary,
+                            modifier = Modifier.padding(top = 8.dp)
+                        )
+                    }
+                    items(items, key = { it.itemDieta.id }) { foodItem ->
+                        AddedFoodItemRow(
+                            item = foodItem, onRemove = {
+                                viewModel.removeTemporaryFoodItem(foodItem)
+                            })
                     }
                 }
             }
+        }
 
-            // Save Button at the bottom
-            Button(
-                onClick = { viewModel.salvarNovaDieta() }, // This will now save the diet AND the list
-                modifier = Modifier
-                    .fillMaxWidth()
-                    .padding(vertical = 16.dp),
-                enabled = nomeDieta.isNotBlank() && temporaryFoodList.isNotEmpty()
-            ) {
-                Text("Salvar Dieta e Alimentos")
-            }
+        // Save Button at the bottom
+        Button(
+            onClick = { viewModel.salvarNovaDieta() }, // This will now save the diet AND the list
+            modifier = Modifier
+                .fillMaxWidth()
+                .padding(vertical = 16.dp),
+            enabled = nomeDieta.isNotBlank() && temporaryFoodList.isNotEmpty()
+        ) {
+            Text("Salvar Dieta e Alimentos")
         }
     }
 }
@@ -157,7 +163,11 @@ fun AddedFoodItemRow(item: ItemDietaComAlimento, onRemove: () -> Unit) {
             Text("${df.format(item.itemDieta.quantidadeGramas)} g", fontSize = 14.sp)
         }
         IconButton(onClick = onRemove) {
-            Icon(Icons.Default.Delete, contentDescription = "Remover Alimento", tint = MaterialTheme.colorScheme.error)
+            Icon(
+                Icons.Default.Delete,
+                contentDescription = "Remover Alimento",
+                tint = MaterialTheme.colorScheme.error
+            )
         }
     }
-}
\ No newline at end of file
+}
diff --git a/app/src/main/java/com/mekki/taco/presentation/ui/diet/DietDetailScreen.kt b/app/src/main/java/com/mekki/taco/presentation/ui/diet/DietDetailScreen.kt
index 3e35b0b..9103cc0 100644
--- a/app/src/main/java/com/mekki/taco/presentation/ui/diet/DietDetailScreen.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/ui/diet/DietDetailScreen.kt
@@ -1,29 +1,23 @@
 package com.mekki.taco.presentation.ui.diet
 
+import androidx.compose.animation.AnimatedVisibility
+import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.*
 import androidx.compose.foundation.lazy.LazyColumn
 import androidx.compose.foundation.lazy.items
+import androidx.compose.foundation.text.KeyboardOptions
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.filled.Add
-import androidx.compose.material.icons.filled.ArrowBack
+import androidx.compose.material.icons.filled.Delete
+import androidx.compose.material.icons.filled.Edit
 import androidx.compose.material3.*
-import androidx.compose.runtime.Composable
-import androidx.compose.runtime.collectAsState
-import androidx.compose.runtime.getValue
-import androidx.compose.runtime.mutableStateOf
-import androidx.compose.runtime.remember
-import androidx.compose.runtime.setValue
+import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
 import androidx.compose.ui.text.font.FontWeight
+import androidx.compose.ui.text.input.KeyboardType
 import androidx.compose.ui.unit.dp
 import androidx.compose.ui.unit.sp
-import androidx.compose.animation.AnimatedVisibility
-import androidx.compose.foundation.clickable
-import androidx.compose.foundation.text.KeyboardOptions
-import androidx.compose.material.icons.filled.Delete
-import androidx.compose.material.icons.filled.Edit
-import androidx.compose.ui.text.input.KeyboardType
 import com.mekki.taco.data.db.entity.ItemDieta
 import com.mekki.taco.data.model.ItemDietaComAlimento
 import com.mekki.taco.presentation.ui.components.NutrientRow
@@ -33,44 +27,54 @@ import java.text.DecimalFormat
 @Composable
 fun DietDetailScreen(
     viewModel: DietDetailViewModel,
-    onNavigateBack: () -> Unit,
-    onNavigateToAddFood: () -> Unit
+    onNavigateToAddFood: () -> Unit,
+    onTitleChange: (String) -> Unit,
+    onFabChange: (@Composable (() -> Unit)?) -> Unit
 ) {
     val dietDetails by viewModel.dietDetails.collectAsState()
     val groupedItems by viewModel.groupedItems.collectAsState()
     val totals by viewModel.dietTotals.collectAsState()
 
-    Scaffold(
-        topBar = {
-            TopAppBar(
-                title = { Text(dietDetails?.dieta?.nome ?: "Carregando Dieta...") },
-                navigationIcon = {
-                    IconButton(onClick = onNavigateBack) {
-                        Icon(Icons.Default.ArrowBack, contentDescription = "Voltar")
-                    }
-                }
-            )
-        },
-        floatingActionButton = {
+    LaunchedEffect(dietDetails?.dieta?.nome) {
+        val title = dietDetails?.dieta?.nome
+        if (title != null) {
+            onTitleChange(title)
+        } else {
+            onTitleChange("Carregando Dieta...")
+        }
+    }
+
+    // Efeito para configurar e limpar o FAB
+    DisposableEffect(Unit) {
+        // Configura o FAB quando a tela entra na composição
+        onFabChange {
             FloatingActionButton(onClick = onNavigateToAddFood) {
                 Icon(Icons.Default.Add, contentDescription = "Adicionar Alimento")
             }
         }
-    ) { paddingValues ->
+
+        // Limpa o FAB quando a tela sai da composição
+        onDispose {
+            onFabChange(null)
+        }
+    }
+
+    if (dietDetails == null) {
+        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
+            CircularProgressIndicator()
+        }
+    } else {
         LazyColumn(
-            modifier = Modifier
-                .fillMaxSize()
-                .padding(paddingValues),
+            modifier = Modifier.fillMaxSize(),
             contentPadding = PaddingValues(16.dp),
-            verticalArrangement = Arrangement.spacedBy(16.dp)
+            verticalArrangement = Arrangement.spacedBy(8.dp)
         ) {
-            // Header Card with Totals
+            // header com os totais
             item {
                 TotalsCard(totals = totals, goal = dietDetails?.dieta?.objetivoCalorias)
             }
 
-            // Display food items grouped by meal
-            if (groupedItems.isEmpty() && dietDetails != null) {
+            if (groupedItems.isEmpty()) {
                 item {
                     Text(
                         text = "Esta dieta ainda não tem alimentos. Toque no botão '+' para começar a adicionar.",
diff --git a/app/src/main/java/com/mekki/taco/presentation/ui/diet/DietListScreen.kt b/app/src/main/java/com/mekki/taco/presentation/ui/diet/DietListScreen.kt
index bd68fd7..b057e18 100644
--- a/app/src/main/java/com/mekki/taco/presentation/ui/diet/DietListScreen.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/ui/diet/DietListScreen.kt
@@ -13,6 +13,7 @@ import androidx.compose.material.icons.filled.Add
 import androidx.compose.material.icons.filled.Delete
 import androidx.compose.material3.*
 import androidx.compose.runtime.Composable
+import androidx.compose.runtime.DisposableEffect
 import androidx.compose.runtime.collectAsState
 import androidx.compose.runtime.getValue
 import androidx.compose.ui.Alignment
@@ -28,53 +29,40 @@ import java.util.Locale
 @Composable
 fun DietListScreen(
     viewModel: DietListViewModel,
-    onNavigateBack: () -> Unit,
     onNavigateToCreateDiet: () -> Unit,
-    onNavigateToDietDetail: (dietId: Int) -> Unit
+    onNavigateToDietDetail: (dietId: Int) -> Unit,
+    onFabChange: (@Composable (() -> Unit)?) -> Unit
 ) {
     val dietas by viewModel.dietas.collectAsState()
 
-    Scaffold(
-        topBar = {
-            TopAppBar(
-                title = { Text("Minhas Dietas") },
-                navigationIcon = {
-                    IconButton(onClick = onNavigateBack) {
-                        Icon(Icons.AutoMirrored.Filled.ArrowBack, contentDescription = "Voltar")
-                    }
-                }
-            )
-        },
-        floatingActionButton = {
+    DisposableEffect(Unit) {
+        onFabChange {
             FloatingActionButton(onClick = onNavigateToCreateDiet) {
                 Icon(Icons.Filled.Add, contentDescription = "Criar Nova Dieta")
             }
         }
-    ) { paddingValues ->
-        Column(
-            modifier = Modifier
-                .fillMaxSize()
-                .padding(paddingValues)
-                .padding(16.dp)
-        ) {
-            if (dietas.isEmpty()) {
-                Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
-                    Text(
-                        "Nenhuma dieta criada ainda.\nClique no '+' para adicionar!",
-                        textAlign = TextAlign.Center,
-                        style = MaterialTheme.typography.bodyLarge
-                    )
-                }
-            } else {
-                LazyColumn(verticalArrangement = Arrangement.spacedBy(10.dp)) {
-                    items(items = dietas, key = { dieta -> dieta.id }) { dieta ->
-                        DietListItem(
-                            dieta = dieta,
-                            onClick = { onNavigateToDietDetail(dieta.id) },
-                            onDeleteClick = { viewModel.deletarDieta(dieta) }
-                        )
-                    }
-                }
+        // Limpa o FAB quando a tela sai
+        onDispose {
+            onFabChange(null)
+        }
+    }
+
+    if (dietas.isEmpty()) {
+        Box(modifier = Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
+            Text(
+                "Nenhuma dieta criada ainda.\nClique no '+' para adicionar!",
+                textAlign = TextAlign.Center,
+                style = MaterialTheme.typography.bodyLarge
+            )
+        }
+    } else {
+        LazyColumn(verticalArrangement = Arrangement.spacedBy(10.dp)) {
+            items(items = dietas, key = { dieta -> dieta.id }) { dieta ->
+                DietListItem(
+                    dieta = dieta,
+                    onClick = { onNavigateToDietDetail(dieta.id) },
+                    onDeleteClick = { viewModel.deletarDieta(dieta) }
+                )
             }
         }
     }
@@ -88,14 +76,20 @@ fun DietListItem(
     onDeleteClick: () -> Unit
 ) {
     ElevatedCard(
-        modifier = Modifier.fillMaxWidth().clickable(onClick = onClick)
+        modifier = Modifier
+            .fillMaxWidth()
+            .clickable(onClick = onClick)
     ) {
         Row(
-            modifier = Modifier.padding(16.dp).fillMaxWidth(),
+            modifier = Modifier
+                .padding(16.dp)
+                .fillMaxWidth(),
             verticalAlignment = Alignment.CenterVertically,
             horizontalArrangement = Arrangement.SpaceBetween
         ) {
-            Column(modifier = Modifier.weight(1f).padding(end = 8.dp)) {
+            Column(modifier = Modifier
+                .weight(1f)
+                .padding(end = 8.dp)) {
                 Text(dieta.nome, style = MaterialTheme.typography.titleMedium)
                 Text(
                     "Criada em: ${formatarDataTimestamp(dieta.dataCriacao)}",
@@ -106,7 +100,11 @@ fun DietListItem(
                 }
             }
             IconButton(onClick = onDeleteClick) {
-                Icon(Icons.Filled.Delete, contentDescription = "Deletar Dieta", tint = MaterialTheme.colorScheme.error)
+                Icon(
+                    Icons.Filled.Delete,
+                    contentDescription = "Deletar Dieta",
+                    tint = MaterialTheme.colorScheme.error
+                )
             }
         }
     }
diff --git a/app/src/main/java/com/mekki/taco/presentation/ui/fooddetail/AlimentoDetailScreen.kt b/app/src/main/java/com/mekki/taco/presentation/ui/fooddetail/AlimentoDetailScreen.kt
index b18b1b5..b698af3 100644
--- a/app/src/main/java/com/mekki/taco/presentation/ui/fooddetail/AlimentoDetailScreen.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/ui/fooddetail/AlimentoDetailScreen.kt
@@ -28,44 +28,39 @@ import com.mekki.taco.data.db.entity.Lipidios
 fun AlimentoDetailScreen(
     uiState: AlimentoDetailUiState,
     onPortionChange: (String) -> Unit,
-    onNavigateBack: () -> Unit
+    onNavigateBack: () -> Unit,
+    onTitleChange: (String) -> Unit
 ) {
-    Scaffold(
-        topBar = {
-            TopAppBar(
-                title = { Text(uiState.displayAlimento?.nome ?: "Carregando...", maxLines = 1) },
-                navigationIcon = {
-                    IconButton(onClick = onNavigateBack) {
-                        Icon(Icons.Default.ArrowBack, "Voltar")
-                    }
-                }
-            )
+    LaunchedEffect(uiState.displayAlimento) {
+        uiState.displayAlimento?.let {
+            onTitleChange(it.nome)
         }
-    ) { paddingValues ->
-        if (uiState.isLoading || uiState.displayAlimento == null) {
-            Box(Modifier.fillMaxSize(), contentAlignment = Alignment.Center) {
-                CircularProgressIndicator()
-            }
+    }
+
+    Box(modifier = Modifier.fillMaxSize()) {
+        if (uiState.isLoading) {
+            CircularProgressIndicator(modifier = Modifier.align(Alignment.Center))
         } else {
-            val alimento = uiState.displayAlimento
-            LazyColumn(
-                modifier = Modifier.fillMaxSize().padding(paddingValues).padding(horizontal = 16.dp),
-                verticalArrangement = Arrangement.spacedBy(16.dp),
-                contentPadding = PaddingValues(vertical = 16.dp)
-            ) {
-                item { PrimaryInfoCard(alimento.energiaKcal, uiState.portion, onPortionChange) }
-                item { MacronutrientsCard(alimento.proteina, alimento.carboidratos, alimento.lipidios) }
-                item { GeneralInfoCard(alimento.fibraAlimentar, alimento.colesterol, alimento.cinzas, alimento.umidade) }
-                item { MineralsCard(alimento) }
-                item { VitaminsCard(alimento) }
-                item { AminoAcidsCard(alimento.aminoacidos) }
+            uiState.displayAlimento?.let { alimento ->
+                LazyColumn(
+                    modifier = Modifier.fillMaxSize().padding(horizontal = 16.dp),
+                    verticalArrangement = Arrangement.spacedBy(16.dp),
+                    contentPadding = PaddingValues(vertical = 16.dp)
+                ) {
+                    item { PrimaryInfoCard(alimento.energiaKcal, uiState.portion, onPortionChange) }
+                    item { MacronutrientsCard(alimento.proteina, alimento.carboidratos, alimento.lipidios) }
+                    item { GeneralInfoCard(alimento.fibraAlimentar, alimento.colesterol, alimento.cinzas, alimento.umidade) }
+                    item { MineralsCard(alimento) }
+                    item { VitaminsCard(alimento) }
+                    item { AminoAcidsCard(alimento.aminoacidos) }
+                }
+            } ?: run {
+                Text("Erro ao carregar o alimento.", modifier = Modifier.align(Alignment.Center))
             }
         }
     }
 }
 
-// --- CARDS ---
-
 @Composable
 fun PrimaryInfoCard(calorias: Double?, portion: String, onPortionChange: (String) -> Unit) {
     Card(Modifier.fillMaxWidth(), elevation = CardDefaults.cardElevation(4.dp)) {
@@ -80,7 +75,6 @@ fun PrimaryInfoCard(calorias: Double?, portion: String, onPortionChange: (String
     }
 }
 
-// ======================= MODIFIED COMPOSABLE START =======================
 @Composable
 fun MacronutrientsCard(proteinas: Double?, carboidratos: Double?, lipidios: Lipidios?) {
     var isFatDetailExpanded by remember { mutableStateOf(false) }
@@ -97,7 +91,7 @@ fun MacronutrientsCard(proteinas: Double?, carboidratos: Double?, lipidios: Lipi
                 style = MaterialTheme.typography.titleLarge,
                 modifier = Modifier.padding(bottom = 12.dp)
             )
-            // This Row is now always visible
+            // This Row is always visible
             Row(
                 modifier = Modifier.fillMaxWidth(),
                 horizontalArrangement = Arrangement.SpaceBetween,
@@ -134,7 +128,6 @@ fun MacronutrientsCard(proteinas: Double?, carboidratos: Double?, lipidios: Lipi
         }
     }
 }
-// ======================= MODIFIED COMPOSABLE END =======================
 
 @Composable
 fun GeneralInfoCard(fibra: Double?, colesterol: Double?, cinzas: Double?, umidade: Double?) {
@@ -203,8 +196,6 @@ fun AminoAcidsCard(aminoacidos: Aminoacidos?) {
     }
 }
 
-// --- HELPER COMPOSABLES ---
-
 @Composable
 fun EditablePortion(portion: String, onPortionChange: (String) -> Unit) {
     Column(horizontalAlignment = Alignment.CenterHorizontally) {
@@ -291,14 +282,13 @@ fun InfoColumn(value: String, unit: String, label: String) {
     }
 }
 
-// ======================= MODIFIED COMPOSABLE START =======================
 @Composable
 fun MacroStat(
     label: String,
     amount: Double,
     icon: ImageVector,
     modifier: Modifier = Modifier,
-    trailingIcon: (@Composable () -> Unit)? = null // Optional icon for the label
+    trailingIcon: (@Composable () -> Unit)? = null
 ) {
     Column(
         horizontalAlignment = Alignment.CenterHorizontally,
@@ -314,4 +304,3 @@ fun MacroStat(
         }
     }
 }
-// ======================= MODIFIED COMPOSABLE END =======================
\ No newline at end of file
diff --git a/app/src/main/java/com/mekki/taco/presentation/ui/home/HomeScreen.kt b/app/src/main/java/com/mekki/taco/presentation/ui/home/HomeScreen.kt
index 9153212..e360974 100644
--- a/app/src/main/java/com/mekki/taco/presentation/ui/home/HomeScreen.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/ui/home/HomeScreen.kt
@@ -2,20 +2,17 @@ package com.mekki.taco.presentation.ui.home
 
 import androidx.compose.animation.AnimatedVisibility
 import androidx.compose.animation.animateContentSize
-import androidx.compose.foundation.Canvas
-import androidx.compose.foundation.background
 import androidx.compose.foundation.clickable
 import androidx.compose.foundation.layout.*
-import androidx.compose.foundation.lazy.LazyColumn
-import androidx.compose.foundation.lazy.items
+import androidx.compose.foundation.rememberScrollState
 import androidx.compose.foundation.shape.RoundedCornerShape
 import androidx.compose.foundation.text.KeyboardActions
 import androidx.compose.foundation.text.KeyboardOptions
+import androidx.compose.foundation.verticalScroll
 import androidx.compose.material.icons.Icons
 import androidx.compose.material.icons.automirrored.filled.KeyboardArrowRight
 import androidx.compose.material.icons.filled.*
 import androidx.compose.material3.*
-import androidx.compose.material3.HorizontalDivider
 import androidx.compose.runtime.*
 import androidx.compose.ui.Alignment
 import androidx.compose.ui.Modifier
@@ -35,17 +32,11 @@ import com.mekki.taco.presentation.ui.profile.ProfileViewModel
 import kotlinx.coroutines.launch
 import java.text.DecimalFormat
 
-// --- Palette ---
-// non-appetite-stimulating macros colors OwO
-private val COLOR_PRIMARY_GREEN = Color(0xFF4CAF50) // verde-esmeralda suave (brand)
-private val COLOR_TEAL = Color(0xFF006B6B) // azul petróleo / teal (support)
-private val COLOR_CREME = Color(0xFFF5F0E6) // creme de suporte
+// Palette
 private val COLOR_TEXT = Color(0xFF222222)
-
-// Macronutrient colors (designed to read quickly, accessible and calm)
-private val COLOR_CARBS = Color(0xFFDCC48E)   // soft wheat / carbohydrate (neutral, non-food-stimulating)
-private val COLOR_PROTEIN = Color(0xFF2E7A7A) // deep teal for protein (trustworthy, cool)
-private val COLOR_FAT = Color(0xFFC97C4A) // warm terracotta for fats (earthy, organic)
+private val COLOR_CARBS = Color(0xFFDCC48E)
+private val COLOR_PROTEIN = Color(0xFF2E7A7A)
+private val COLOR_FAT = Color(0xFFC97C4A)
 private val COLOR_KCAL = Color(0xFFA83C3C)
 
 @OptIn(ExperimentalMaterial3Api::class)
@@ -58,69 +49,52 @@ fun HomeScreen(
     onNavigateToDetail: (Int) -> Unit
 ) {
     val state by homeViewModel.state.collectAsState()
+
+    // A lógica para a BottomSheet (perfil) deve ser movida para a MainActivity
     val sheetState = rememberModalBottomSheetState()
     val scope = rememberCoroutineScope()
     var showBottomSheet by remember { mutableStateOf(false) }
 
-    Scaffold(
-        topBar = {
-            CenterAlignedTopAppBar(
-                title = { Text("NutriTACO", color = MaterialTheme.colorScheme.onPrimary) },
-                colors = TopAppBarDefaults.centerAlignedTopAppBarColors(
-                    containerColor = MaterialTheme.colorScheme.primary
-                ),
-                actions = {
-                    IconButton(onClick = { showBottomSheet = true }) {
-                        Icon(
-                            imageVector = Icons.Default.AccountCircle,
-                            contentDescription = "Abrir Perfil",
-                            tint = MaterialTheme.colorScheme.onPrimary
-                        )
-                    }
-                }
-            )
-        }
-    ) { paddingValues ->
-        LazyColumn(
-            modifier = Modifier
-                .fillMaxSize()
-                .padding(paddingValues)
-                .background(MaterialTheme.colorScheme.background),
-            contentPadding = PaddingValues(16.dp),
-            verticalArrangement = Arrangement.spacedBy(24.dp)
-        ) {
-            item {
-                QuickSearchCard(
-                    state = state,
-                    viewModel = homeViewModel,
-                    onNavigateToDetail = onNavigateToDetail
-                )
-            }
-            item {
-                DietOverviewCard(state = state, onNavigateToDietList = onNavigateToDietList)
-            }
-            item {
-                NavigationActionsCard(onNavigateToDietList, onNavigateToDiary)
-            }
-        }
+    Column(
+        modifier = Modifier
+            .fillMaxSize()
+            .verticalScroll(rememberScrollState()) // Permite rolagem apenas se o conteúdo transbordar
+            .padding(16.dp)
+    ) {
+        // Observação: O TopAppBar com o botão de perfil agora vive na MainActivity.
+        // Se precisar do botão de perfil aqui, a lógica para `showBottomSheet`
+        // precisará ser "hoisted" (elevada) para a MainActivity.
 
-        if (showBottomSheet) {
-            ModalBottomSheet(
-                onDismissRequest = { showBottomSheet = false },
-                sheetState = sheetState
-            ) {
-                // Conteúdo da aba, vindo do ProfileSheet.kt
-                ProfileSheetContent(
-                    viewModel = profileViewModel,
-                    onDismiss = {
-                        scope.launch { sheetState.hide() }.invokeOnCompletion {
-                            if (!sheetState.isVisible) {
-                                showBottomSheet = false
-                            }
+        QuickSearchCard(
+            state = state,
+            viewModel = homeViewModel,
+            onNavigateToDetail = onNavigateToDetail
+        )
+        Spacer(modifier = Modifier.height(24.dp))
+        DietOverviewCard(state = state, onNavigateToDietList = onNavigateToDietList)
+        Spacer(modifier = Modifier.height(24.dp))
+        NavigationActionsCard(onNavigateToDietList, onNavigateToDiary)
+
+        // Este Spacer flexível empurra to-do o conteúdo para cima em telas altas,
+        // ocupando o espaço vazio e prevenindo a rolagem desnecessária.
+        Spacer(Modifier.weight(1f))
+    }
+
+    if (showBottomSheet) {
+        ModalBottomSheet(
+            onDismissRequest = { showBottomSheet = false },
+            sheetState = sheetState
+        ) {
+            ProfileSheetContent(
+                viewModel = profileViewModel,
+                onDismiss = {
+                    scope.launch { sheetState.hide() }.invokeOnCompletion {
+                        if (!sheetState.isVisible) {
+                            showBottomSheet = false
                         }
                     }
-                )
-            }
+                }
+            )
         }
     }
 }
@@ -300,7 +274,7 @@ fun MacroInfoBubble(
                     Text("Adicionar")
                 }
 
-                TextButton(onClick = { /* navigate to details handled by parent clickable */ }) {
+                TextButton(onClick = { }) {
                     Icon(Icons.Default.Info, contentDescription = "Detalhes")
                     Spacer(Modifier.width(8.dp))
                     Text("Detalhes")
@@ -313,13 +287,11 @@ fun MacroInfoBubble(
 @Composable
 fun DietOverviewCard(state: HomeState, onNavigateToDietList: () -> Unit) {
     val totals = state.dietTotals
-    // build pie data and sanitize values to avoid rendering crashes
     val rawPieData = listOf(
         PieChartData(totals.totalCarbs.toFloat(), COLOR_CARBS, "Carbs"),
         PieChartData(totals.totalProtein.toFloat(), COLOR_PROTEIN, "Protein"),
         PieChartData(totals.totalFat.toFloat(), COLOR_FAT, "Fat")
     )
-    // sanitize pie data (ensure non-negative, avoid NaN / zero-sum causing issues in the chart)
     val pieData = rawPieData.map { PieChartData(value = (if (it.value.isFinite()) it.value else 0f).coerceAtLeast(0f), color = it.color, label = it.label) }
     val pieSum = pieData.sumOf { it.value.toDouble() }
 
@@ -417,8 +389,6 @@ fun NavigationActionRow(title: String, icon: ImageVector, onClick: () -> Unit) {
 
 private fun Alimento.subtitleShort(): String {
     val df = DecimalFormat("#.#")
-    // takeIf retorna a categoria somente se ela não estiver em branco.
-    // Se estiver em branco, takeIf retorna null, e o operador Elvis (?:) continua a verificação.
     return this.categoria.takeIf { it.isNotBlank() }
         ?: this.proteina?.let { "Proteína: ${df.format(it)} g" }
         ?: this.energiaKcal?.let { "${it.toInt()} kcal" }
@@ -431,4 +401,4 @@ fun MacroText(label: String, value: Double?, unit: String, color: Color, df: Dec
         Text(label, style = MaterialTheme.typography.bodyMedium, fontWeight = FontWeight.Bold, color = color)
         Text("${df.format(value ?: 0.0)}$unit", style = MaterialTheme.typography.bodyLarge)
     }
-}
+}
\ No newline at end of file
diff --git a/app/src/main/java/com/mekki/taco/presentation/ui/home/HomeViewModel.kt b/app/src/main/java/com/mekki/taco/presentation/ui/home/HomeViewModel.kt
index 413cb5a..eeaf101 100644
--- a/app/src/main/java/com/mekki/taco/presentation/ui/home/HomeViewModel.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/ui/home/HomeViewModel.kt
@@ -11,14 +11,13 @@ import com.mekki.taco.utils.NutrientCalculator
 import kotlinx.coroutines.flow.*
 import kotlinx.coroutines.launch
 
-// Updated State to track the expanded item's ID
 data class HomeState(
     val primaryDiet: DietaComItens? = null,
     val dietTotals: DietTotals = DietTotals(),
     val searchTerm: String = "",
     val searchIsLoading: Boolean = false,
     val searchResults: List<Alimento> = emptyList(),
-    val expandedAlimentoId: Int? = null // This replaces selectedAlimento
+    val expandedAlimentoId: Int? = null
 )
 
 class HomeViewModel(
@@ -115,7 +114,7 @@ class HomeViewModel(
         }
     }
 
-    // limpar a buscar
+    // limpar a busca
     fun cleanSearch() {
         _state.update {
             it.copy(
diff --git a/app/src/main/java/com/mekki/taco/presentation/ui/search/AlimentoSearchScreen.kt b/app/src/main/java/com/mekki/taco/presentation/ui/search/AlimentoSearchScreen.kt
index 1afcd1a..1f57549 100644
--- a/app/src/main/java/com/mekki/taco/presentation/ui/search/AlimentoSearchScreen.kt
+++ b/app/src/main/java/com/mekki/taco/presentation/ui/search/AlimentoSearchScreen.kt
@@ -27,11 +27,6 @@ import com.mekki.taco.data.db.entity.Lipidios
 import kotlinx.coroutines.flow.Flow
 import kotlinx.coroutines.flow.flowOf
 
-/**
- * This is the main, stateful screen composable.
- * It connects the ViewModel to the UI content and handles navigation.
- * You will call this from your AppNavHost.
- */
 @OptIn(ExperimentalMaterial3Api::class)
 @Composable
 fun AlimentoSearchScreen(
@@ -45,21 +40,8 @@ fun AlimentoSearchScreen(
     val isLoading by viewModel.isLoading.collectAsState()
     val keyboardController = LocalSoftwareKeyboardController.current
 
-    Scaffold(
-        topBar = {
-            TopAppBar(
-                title = { Text("Buscar Alimento") },
-                navigationIcon = {
-                    IconButton(onClick = onNavigateBack) {
-                        Icon(Icons.Filled.ArrowBack, contentDescription = "Voltar")
-                    }
-                }
-            )
-        }
-    ) { paddingValues ->
-        // Call the stateless content composable, passing down the state and event handlers
+
         AlimentoSearchScreenContent(
-            modifier = Modifier.padding(paddingValues),
             termoBusca = termoBusca,
             onTermoBuscaChange = { viewModel.onTermoBuscaChange(it) },
             resultados = resultados,
@@ -68,13 +50,8 @@ fun AlimentoSearchScreen(
             onPerformSearch = { keyboardController?.hide() }
         )
     }
-}
 
 
-/**
- * This is the stateless composable that draws the UI.
- * It receives all data and callbacks as parameters, making it easy to preview.
- */
 @Composable
 private fun AlimentoSearchScreenContent(
     modifier: Modifier = Modifier,
diff --git a/gradle/libs.versions.toml b/gradle/libs.versions.toml
index e903fd2..ab0636d 100644
--- a/gradle/libs.versions.toml
+++ b/gradle/libs.versions.toml
@@ -9,6 +9,7 @@ appcompat = "1.7.0"
 material = "1.12.0"
 activity = "1.10.1"
 constraintlayout = "2.2.1"
+runtime = "1.9.2"
 
 [libraries]
 androidx-core-ktx = { group = "androidx.core", name = "core-ktx", version.ref = "coreKtx" }
@@ -19,6 +20,7 @@ androidx-appcompat = { group = "androidx.appcompat", name = "appcompat", version
 material = { group = "com.google.android.material", name = "material", version.ref = "material" }
 androidx-activity = { group = "androidx.activity", name = "activity", version.ref = "activity" }
 androidx-constraintlayout = { group = "androidx.constraintlayout", name = "constraintlayout", version.ref = "constraintlayout" }
+androidx-runtime = { group = "androidx.compose.runtime", name = "runtime", version.ref = "runtime" }
 
 [plugins]
 android-application = { id = "com.android.application", version.ref = "agp" }
